/**
 * script.js - L√≥gica da Aplica√ß√£o Garagem Inteligente
 * Gerencia ve√≠culos, intera√ß√µes, manuten√ß√£o e interface do usu√°rio.
 */

// ===== CLASSES =====

/**
 * Representa um registro de manuten√ß√£o (realizada ou agendada).
 */
class Manutencao {
    /**
     * @param {string} data - Data no formato YYYY-MM-DD.
     * @param {string} tipo - Tipo de servi√ßo.
     * @param {number|null} custo - Custo do servi√ßo (obrigat√≥rio se status='Realizada').
     * @param {string} [descricao=""] - Descri√ß√£o opcional.
     * @param {'Realizada'|'Agendada'} [status="Realizada"] - Status da manuten√ß√£o.
     */
    constructor(data, tipo, custo, descricao = "", status = "Realizada") {
        this.data = data;
        this.tipo = tipo.trim();
        // Armazena custo como n√∫mero ou null
        this.custo = (custo !== null && custo !== undefined && !isNaN(parseFloat(custo))) ? parseFloat(custo) : null;
        this.descricao = descricao.trim();
        this.status = status; // 'Realizada' ou 'Agendada'
    }

    /**
     * Formata a manuten√ß√£o para exibi√ß√£o.
     * @returns {string} Representa√ß√£o textual da manuten√ß√£o.
     */
    formatar() {
        const dataFormatada = this.data ? new Date(this.data + 'T00:00:00').toLocaleDateString('pt-BR') : 'Data inv√°lida';
        let custoFormatado = "";
        // Exibe custo apenas se for 'Realizada' e tiver valor v√°lido
        if (this.status === 'Realizada' && this.custo !== null && this.custo >= 0) {
            custoFormatado = ` - R$${Number(this.custo).toFixed(2)}`;
        }
        let descInfo = this.descricao ? ` (${this.descricao})` : '';
        let statusIcon = this.status === 'Realizada' ? 'üîß' : 'üìÖ';
        return `${statusIcon} ${this.tipo} em ${dataFormatada}${custoFormatado}${descInfo} [${this.status}]`;
    }

    /**
     * Valida os dados da manuten√ß√£o. Exibe alertas em caso de erro.
     * @returns {boolean} True se v√°lido, False caso contr√°rio.
     */
    validar() {
        const hoje = new Date().toISOString().split('T')[0]; // Formato YYYY-MM-DD

        if (!this.tipo) {
            mostrarStatusGlobal("Erro: O tipo de servi√ßo n√£o pode estar vazio.", "error");
            return false;
        }
        if (!this.data) {
            mostrarStatusGlobal("Erro: A data da manuten√ß√£o √© obrigat√≥ria.", "error");
            return false;
        }
        // Valida√ß√£o b√°sica da data
        try {
            const dataObj = new Date(this.data + 'T00:00:00');
            if (isNaN(dataObj.getTime())) throw new Error("Data inv√°lida");

            // Valida√ß√£o espec√≠fica de status vs data
            if (this.status === 'Realizada' && this.data > hoje) {
                mostrarStatusGlobal("Erro: Manuten√ß√£o 'Realizada' n√£o pode ter data futura.", "error");
                return false;
            }
            // Aviso opcional para agendamentos no passado (pode ser √∫til mant√™-los)
            // if(this.status === 'Agendada' && this.data < hoje) {
            //     console.warn(`Aviso: Agendamento de '${this.tipo}' para ${this.data} est√° no passado.`);
            // }

        } catch (e) {
            mostrarStatusGlobal("Erro: Formato de data inv√°lido. Use AAAA-MM-DD.", "error");
            return false;
        }

        // Custo √© obrigat√≥rio e deve ser >= 0 para 'Realizada'
        if (this.status === 'Realizada' && (this.custo === null || this.custo < 0)) {
            mostrarStatusGlobal("Erro: Custo inv√°lido para manuten√ß√£o realizada. Deve ser um n√∫mero positivo ou zero.", "error");
            return false;
        }
        // Valida status conhecido
        if (!['Realizada', 'Agendada'].includes(this.status)) {
            mostrarStatusGlobal("Erro: Status de manuten√ß√£o inv√°lido.", "error");
            return false;
        }

        return true; // Passou em todas as valida√ß√µes
    }

    /**
     * Retorna o objeto Date da manuten√ß√£o para compara√ß√µes.
     * @returns {Date|null} O objeto Date ou null se a data for inv√°lida.
     */
    getDataObj() {
        try {
            // Adiciona T00:00:00 para evitar problemas de fuso hor√°rio ao criar s√≥ com data
            const dataObj = new Date(this.data + 'T00:00:00');
            if (isNaN(dataObj.getTime())) return null;
            return dataObj;
        } catch (e) {
            return null;
        }
    }
}

/**
 * Classe base para todos os ve√≠culos.
 */
class Carro {
    /**
     * @param {string} modelo - Modelo do carro.
     * @param {string} cor - Cor do carro.
     * @param {string} [id=uuid()] - ID √∫nico do ve√≠culo.
     */
    constructor(modelo, cor, id = uuidv4()) { // Usa UUID para IDs mais robustos
        if (!modelo || !cor) throw new Error("Modelo e Cor s√£o obrigat√≥rios.");
        this.id = id;
        this.modelo = modelo.trim();
        this.cor = cor.trim();
        this.ligado = false;
        this.velocidade = 0;
        this.velocidadeMaxima = 180;
        this.tipo = "carro"; // Identificador do tipo
        this.historicoManutencao = []; // Array de objetos Manutencao
    }

    /**
     * Adiciona um registro de manuten√ß√£o ao hist√≥rico do ve√≠culo.
     * @param {Manutencao} manutencao - O objeto Manutencao a ser adicionado.
     * @returns {boolean} True se adicionado com sucesso, False caso contr√°rio.
     */
    adicionarManutencao(manutencao) {
        if (!(manutencao instanceof Manutencao)) {
             console.error("Tentativa de adicionar objeto que n√£o √© Manutencao.");
             mostrarStatusGlobal("Erro interno ao adicionar manuten√ß√£o.", "error");
             return false;
         }
        // A valida√ß√£o agora √© feita antes de chamar este m√©todo, mas uma verifica√ß√£o extra n√£o faz mal.
        if (!manutencao.validar()) {
             // A fun√ß√£o validar() j√° deve ter mostrado o erro espec√≠fico.
             return false;
        }

        try {
            this.historicoManutencao.push(manutencao);
            // Ordena sempre por data ap√≥s adicionar (mais recentes primeiro √© comum)
            this.historicoManutencao.sort((a, b) => {
                 const dataA = a.getDataObj();
                 const dataB = b.getDataObj();
                 if (!dataA) return 1;
                 if (!dataB) return -1;
                 // Ordena por data descendente (mais recente primeiro)
                 return dataB - dataA;
            });
            console.log(`Manuten√ß√£o (${manutencao.status}) adicionada ao ${this.modelo}: ${manutencao.tipo}`);
            salvarGaragem(); // Salva o estado da garagem
            return true;
        } catch (error) {
             console.error("Erro ao adicionar ou ordenar manuten√ß√£o:", error);
             mostrarStatusGlobal("Erro ao salvar manuten√ß√£o.", "error");
             return false;
        }
    }

    /**
     * Retorna o hist√≥rico de manuten√ß√£o formatado e separado por status.
     * @returns {{realizadas: string[], futuras: string[], passadas: string[]}} Objeto com listas de manuten√ß√µes formatadas.
     */
    getHistoricoFormatado() {
        const hoje = new Date();
        hoje.setHours(0, 0, 0, 0); // Zera horas para comparar s√≥ a data

        const realizadas = [];
        const futuras = [];
        const passadasAgendadas = []; // Agendamentos cuja data j√° passou

        this.historicoManutencao.forEach(m => {
            const dataManutencao = m.getDataObj();
            const textoFormatado = m.formatar();

            if (m.status === 'Realizada') {
                realizadas.push(textoFormatado);
            } else if (m.status === 'Agendada') {
                if (dataManutencao && dataManutencao >= hoje) {
                    futuras.push(textoFormatado);
                } else {
                    // Se a data for inv√°lida ou anterior a hoje
                    passadasAgendadas.push(textoFormatado);
                }
            }
        });

        // Ordena agendamentos futuros por data (mais pr√≥xima primeiro)
        futuras.sort((a, b) => {
            // Extrai a data da string formatada para ordenar (simplificado, ideal seria usar o objeto)
            const dataStrA = a.match(/em (.*?)( - | \(| \[)/)?.[1];
            const dataStrB = b.match(/em (.*?)( - | \(| \[)/)?.[1];
            const dataA = dataStrA ? parsePtBrDate(dataStrA) : null;
            const dataB = dataStrB ? parsePtBrDate(dataStrB) : null;
            if (!dataA) return 1;
            if (!dataB) return -1;
            return dataA - dataB;
        });


        return { realizadas, futuras, passadas: passadasAgendadas };
    }

    ligar() {
        if (this.ligado) {
            mostrarStatusGlobal("O carro j√° est√° ligado!", "error");
            return;
        }
        this.ligado = true;
        playSound("somLigar");
        atualizarStatusVisual(this); // Atualiza a UI se este for o selecionado
        salvarGaragem();
        console.log(`${this.modelo} ligado!`);
        mostrarStatusGlobal(`${this.modelo} ligado.`, "success");
    }

    desligar() {
        if (!this.ligado) {
            mostrarStatusGlobal("O carro j√° est√° desligado!", "error");
            return;
        }
        if (this.velocidade > 0) {
            mostrarStatusGlobal("Pare o carro completamente antes de desligar!", "error");
            return;
        }
        this.ligado = false;
        // Velocidade j√° √© 0, mas garantir
        this.velocidade = 0;
        playSound("somDesligar");
        atualizarStatusVisual(this);
        salvarGaragem();
        console.log(`${this.modelo} desligado!`);
         mostrarStatusGlobal(`${this.modelo} desligado.`, "success");
    }

    acelerar(incremento) {
        if (!this.ligado) {
            mostrarStatusGlobal("Ligue o carro para acelerar.", "error");
            return;
        }
        if (typeof incremento !== 'number' || incremento <= 0) {
             console.warn("Incremento de acelera√ß√£o inv√°lido:", incremento);
             incremento = 10; // Valor padr√£o
         }
        const novaVelocidade = this.velocidade + incremento;
        this.velocidade = Math.min(novaVelocidade, this.velocidadeMaxima); // Limita pela m√°xima

        playSound("somAcelerar");
        atualizarStatusVisual(this);
        // N√£o salvar a cada acelerada/freada para performance, mas pode ser necess√°rio
        // salvarGaragem();
        console.log(`Velocidade de ${this.modelo}: ${this.velocidade} km/h`);
         // Mostrar status s√≥ se atingir max? Ou sempre? Optando por n√£o mostrar para n√£o poluir.
    }

    frear(decremento) {
        if (this.velocidade === 0) {
            // N√£o mostrar erro se j√° estiver parado
             return;
         }
         if (typeof decremento !== 'number' || decremento <= 0) {
              console.warn("Decremento de frenagem inv√°lido:", decremento);
              decremento = 10; // Valor padr√£o
          }

        this.velocidade = Math.max(0, this.velocidade - decremento); // Garante m√≠nimo 0
        playSound("somFrear");
        atualizarStatusVisual(this);

        console.log(`Velocidade de ${this.modelo}: ${this.velocidade} km/h`);
        // Salvar estado quando o carro parar completamente
        if (this.velocidade === 0) {
            salvarGaragem();
             mostrarStatusGlobal(`${this.modelo} parado.`, "success");
        }
    }

    buzinar() {
        playSound("somBuzina");
        console.log(`${this.modelo} buzinou: Beep beep!`);
        mostrarStatusGlobal(`${this.modelo} buzinou!`, "success");
    }

    /**
     * Retorna uma string HTML com as informa√ß√µes b√°sicas do ve√≠culo.
     * @returns {string} HTML com as informa√ß√µes.
     */
    exibirInformacoesBase() {
        // Status visual √© tratado separadamente pelo atualizarStatusVisual
         return `
             ID: ${this.id}<br>
             Modelo: ${this.modelo}<br>
             Cor: ${this.cor}<br>
             Tipo: ${this.tipo.charAt(0).toUpperCase() + this.tipo.slice(1)}<br>
             Velocidade M√°xima: ${this.velocidadeMaxima} km/h`;
     }

    /**
     * Retorna a string HTML completa para exibi√ß√£o nos detalhes.
     * Pode ser sobrescrito por classes filhas.
     * @returns {string} HTML com todas as informa√ß√µes relevantes.
     */
    exibirInformacoesDetalhes() {
        return this.exibirInformacoesBase();
    }


    /**
     * Retorna a descri√ß√£o curta para a lista de ve√≠culos.
     * @returns {string} Descri√ß√£o para a lista.
     */
    getDescricaoLista() {
        return `${this.modelo} (${this.cor})`;
    }

    /**
     * Recria uma inst√¢ncia de Carro a partir de dados puros (LocalStorage).
     * @param {object} data - Objeto com os dados do carro.
     * @returns {Carro} Inst√¢ncia recriada.
     */
    static fromData(data) {
        try {
            const carro = new Carro(data.modelo, data.cor, data.id);
            carro.ligado = data.ligado ?? false;
            carro.velocidade = data.velocidade ?? 0;
            carro.velocidadeMaxima = data.velocidadeMaxima ?? 180;
            // Recriar objetos Manutencao
            if (Array.isArray(data.historicoManutencao)) {
                carro.historicoManutencao = data.historicoManutencao.map(m =>
                    new Manutencao(m.data, m.tipo, m.custo, m.descricao, m.status)
                );
            } else {
                carro.historicoManutencao = [];
            }
            return carro;
        } catch (error) {
             console.error("Erro ao recriar Carro a partir dos dados:", data, error);
             return null; // Retorna null para indicar falha na recria√ß√£o
        }
    }
}

/**
 * Representa um Carro Esportivo, herdando de Carro.
 */
class CarroEsportivo extends Carro {
    constructor(modelo, cor, id = uuidv4()) {
        super(modelo, cor, id);
        this.turboAtivado = false;
        this.velocidadeMaxima = 250; // Vel max padr√£o esportivo
        this.velocidadeMaximaTurbo = 320; // Vel max com turbo
        this.tipo = "esportivo";
    }

    ativarTurbo() {
        if (!this.ligado) {
            mostrarStatusGlobal("Ligue o carro para ativar o turbo.", "error");
            return;
        }
        if (this.turboAtivado) {
            mostrarStatusGlobal("O turbo j√° est√° ativado!", "error");
            return;
        }
        this.turboAtivado = true;
        this.velocidadeMaxima = this.velocidadeMaximaTurbo;
        console.log("Turbo ativado!");
        mostrarStatusGlobal("Turbo Ativado!", "success");
        atualizarStatusVisual(this); // Atualiza UI (incluindo info e bot√µes)
        salvarGaragem();
    }

    desativarTurbo() {
        if (!this.turboAtivado) {
            mostrarStatusGlobal("O turbo j√° est√° desativado.", "error");
            return;
        }
        this.turboAtivado = false;
        // Volta para a velocidade m√°xima padr√£o do esportivo
        const velMaxPadrao = Object.getPrototypeOf(this).constructor.prototype.velocidadeMaxima;
        this.velocidadeMaxima = velMaxPadrao;

        // Limita a velocidade atual se exceder a nova m√°xima
        if (this.velocidade > this.velocidadeMaxima) {
            this.velocidade = this.velocidadeMaxima;
            console.log("Velocidade limitada ap√≥s desativar turbo.");
            mostrarStatusGlobal("Turbo Desativado. Velocidade limitada.", "success");
        } else {
             mostrarStatusGlobal("Turbo Desativado.", "success");
        }

        console.log("Turbo desativado!");
        atualizarStatusVisual(this);
        salvarGaragem();
    }

    // Sobrescreve acelerar para incluir boost do turbo
    acelerar(incremento) {
        if (!this.ligado) {
            mostrarStatusGlobal("Ligue o carro para acelerar.", "error");
            return;
        }
        const boost = this.turboAtivado ? 1.8 : 1.0; // Acelera√ß√£o maior com turbo
        const incrementoReal = (incremento || 10) * boost;
        super.acelerar(incrementoReal); // Chama o acelerar da classe pai com boost
    }

    // Sobrescreve para adicionar info do turbo
    exibirInformacoesDetalhes() {
        const infoBase = this.exibirInformacoesBase();
        const turboStatus = this.turboAtivado ? '<span style="color: red; font-weight: bold;">Ativado</span>' : "Desativado";
        return `
            ${infoBase}<br>
            Turbo: ${turboStatus}
        `;
    }

    // M√©todo para recriar do localStorage
    static fromData(data) {
         try {
            const esportivo = new CarroEsportivo(data.modelo, data.cor, data.id);
            // Preenche dados comuns usando o fromData da classe pai (se existir e for √∫til)
            // ou manualmente
            esportivo.ligado = data.ligado ?? false;
            esportivo.velocidade = data.velocidade ?? 0;
            esportivo.turboAtivado = data.turboAtivado ?? false;
            // Garante que a vel max correta seja definida com base no turbo
             esportivo.velocidadeMaxima = esportivo.turboAtivado ? esportivo.velocidadeMaximaTurbo : Object.getPrototypeOf(esportivo).constructor.prototype.velocidadeMaxima;

            // Recriar objetos Manutencao
            if (Array.isArray(data.historicoManutencao)) {
                esportivo.historicoManutencao = data.historicoManutencao.map(m =>
                    new Manutencao(m.data, m.tipo, m.custo, m.descricao, m.status)
                );
            } else {
                esportivo.historicoManutencao = [];
            }
            return esportivo;
         } catch (error) {
              console.error("Erro ao recriar CarroEsportivo a partir dos dados:", data, error);
              return null;
         }
    }
}

/**
 * Representa um Caminh√£o, herdando de Carro.
 */
class Caminhao extends Carro {
    constructor(modelo, cor, capacidadeCarga, id = uuidv4()) {
        super(modelo, cor, id);
        if (typeof capacidadeCarga !== 'number' || capacidadeCarga <= 0) {
            throw new Error("Capacidade de carga inv√°lida para Caminh√£o.");
        }
        this.capacidadeCarga = capacidadeCarga;
        this.cargaAtual = 0;
        this.velocidadeMaxima = 120; // Vel max padr√£o caminh√£o
        this.tipo = "caminhao";
    }

    carregar(quantidade) {
        if (this.ligado) {
            mostrarStatusGlobal("Desligue o caminh√£o antes de carregar/descarregar.", "error");
            return false; // Indica falha
        }
        if (typeof quantidade !== 'number' || quantidade <= 0) {
            mostrarStatusGlobal("A quantidade a carregar deve ser um n√∫mero positivo.", "error");
            return false;
        }
        if (this.cargaAtual + quantidade > this.capacidadeCarga) {
            mostrarStatusGlobal(`Carga (${quantidade}kg) excede a capacidade restante (${this.capacidadeCarga - this.cargaAtual}kg).`, "error");
            return false;
        }
        this.cargaAtual += quantidade;
        console.log(`Caminh√£o carregado. Carga atual: ${this.cargaAtual} kg`);
        mostrarStatusGlobal(`Carregado ${quantidade}kg. Carga atual: ${this.cargaAtual}kg.`, "success");
        atualizarStatusVisual(this);
        salvarGaragem();
        return true; // Indica sucesso
    }

    descarregar(quantidade) {
        if (this.ligado) {
            mostrarStatusGlobal("Desligue o caminh√£o antes de carregar/descarregar.", "error");
            return false;
        }
        if (typeof quantidade !== 'number' || quantidade <= 0) {
            mostrarStatusGlobal("A quantidade a descarregar deve ser um n√∫mero positivo.", "error");
            return false;
        }
        if (this.cargaAtual - quantidade < 0) {
            mostrarStatusGlobal(`N√£o h√° carga suficiente para descarregar ${quantidade} kg. Carga atual: ${this.cargaAtual} kg.`, "error");
            return false;
        }
        this.cargaAtual -= quantidade;
        console.log(`Caminh√£o descarregado. Carga atual: ${this.cargaAtual} kg`);
        mostrarStatusGlobal(`Descarregado ${quantidade}kg. Carga atual: ${this.cargaAtual}kg.`, "success");
        atualizarStatusVisual(this);
        salvarGaragem();
        return true;
    }

    // Sobrescreve acelerar para considerar a carga
    acelerar(incremento) {
        if (!this.ligado) {
            mostrarStatusGlobal("Ligue o caminh√£o para acelerar.", "error");
            return;
        }
        // Fator de redu√ß√£o: 1 (vazio) a ~0.5 (cheio)
        const fatorCarga = 1 - (this.cargaAtual / (this.capacidadeCarga * 2));
        // Garante uma acelera√ß√£o m√≠nima (ex: 30% da normal)
        const incrementoReal = (incremento || 10) * Math.max(0.3, fatorCarga);
        super.acelerar(incrementoReal);
    }

    // Sobrescreve para adicionar info da carga
    exibirInformacoesDetalhes() {
        const infoBase = this.exibirInformacoesBase();
        return `
            ${infoBase}<br>
            Capacidade: ${this.capacidadeCarga} kg<br>
            Carga atual: ${this.cargaAtual} kg
        `;
    }

    // M√©todo para recriar do localStorage
    static fromData(data) {
        try {
            const caminhao = new Caminhao(data.modelo, data.cor, data.capacidadeCarga, data.id);
            caminhao.ligado = data.ligado ?? false;
            caminhao.velocidade = data.velocidade ?? 0;
            caminhao.cargaAtual = data.cargaAtual ?? 0;
            // Recriar objetos Manutencao
            if (Array.isArray(data.historicoManutencao)) {
                caminhao.historicoManutencao = data.historicoManutencao.map(m =>
                    new Manutencao(m.data, m.tipo, m.custo, m.descricao, m.status)
                );
            } else {
                caminhao.historicoManutencao = [];
            }
            return caminhao;
        } catch (error) {
             console.error("Erro ao recriar Caminhao a partir dos dados:", data, error);
             return null;
        }
    }
}


// ===== GERENCIAMENTO DA GARAGEM E PERSIST√äNCIA =====

let garagem = []; // Array global para os ve√≠culos
let veiculoSelecionado = null; // Refer√™ncia ao objeto do ve√≠culo atualmente selecionado

const GARAGEM_STORAGE_KEY = 'minhaGaragemInteligenteUnificada'; // Nova chave para evitar conflitos

/**
 * Salva o estado atual da garagem no LocalStorage.
 */
function salvarGaragem() {
    try {
        // Mapeia a garagem para um formato serializ√°vel (objetos planos)
        const garagemParaSalvar = garagem.map(veiculo => {
            // Cria uma c√≥pia plana do objeto ve√≠culo
             const data = { ...veiculo };
             // Garante que o hist√≥rico de manuten√ß√£o tamb√©m seja salvo como objetos planos
             data.historicoManutencao = veiculo.historicoManutencao.map(m => ({...m}));
             return data;
        });
        localStorage.setItem(GARAGEM_STORAGE_KEY, JSON.stringify(garagemParaSalvar));
        console.log(`Garagem salva com ${garagem.length} ve√≠culo(s).`);
    } catch (error) {
        console.error("Erro fatal ao salvar garagem no LocalStorage:", error);
        mostrarStatusGlobal("ERRO CR√çTICO: N√£o foi poss√≠vel salvar a garagem!", "error");
        // Considerar desabilitar a√ß√µes que modificam estado se salvar falhar?
    }
}

/**
 * Carrega a garagem do LocalStorage ao iniciar a aplica√ß√£o.
 */
function carregarGaragem() {
    const dadosSalvos = localStorage.getItem(GARAGEM_STORAGE_KEY);
    if (!dadosSalvos) {
        console.log("Nenhuma garagem salva encontrada. Iniciando com garagem vazia.");
        garagem = [];
        atualizarListaVeiculosUI(); // Atualiza a UI para mostrar garagem vazia
        return;
    }

    try {
        const garagemData = JSON.parse(dadosSalvos);
        if (!Array.isArray(garagemData)) throw new Error("Dados salvos n√£o s√£o um array.");

        garagem = garagemData.map(data => {
            if (!data || !data.tipo) {
                 console.warn("Dado de ve√≠culo inv√°lido ou sem tipo encontrado:", data);
                 return null; // Ignora dados inv√°lidos
             }
            // Reconstr√≥i os objetos com base no tipo
            switch (data.tipo) {
                case 'carro':       return Carro.fromData(data);
                case 'esportivo':   return CarroEsportivo.fromData(data);
                case 'caminhao':    return Caminhao.fromData(data);
                default:
                    console.warn("Tipo de ve√≠culo desconhecido encontrado nos dados salvos:", data.tipo);
                    return null; // Ignora tipos desconhecidos
            }
        }).filter(v => v instanceof Carro); // Filtra nulos e garante que s√£o inst√¢ncias de Carro

        console.log(`Garagem carregada com ${garagem.length} ve√≠culo(s).`);
        atualizarListaVeiculosUI();
        verificarAgendamentosProximos(); // Verifica alertas ao carregar
        mostrarStatusGlobal(`Garagem carregada com ${garagem.length} ve√≠culo(s).`, "success");

    } catch (error) {
        console.error("Erro ao carregar/parsear garagem do LocalStorage:", error);
        mostrarStatusGlobal("Erro ao carregar dados salvos. Resetando garagem.", "error");
        garagem = []; // Reseta a garagem em caso de erro grave
        localStorage.removeItem(GARAGEM_STORAGE_KEY); // Limpa dados inv√°lidos
        atualizarListaVeiculosUI();
    }
}


// ===== CONTROLE DA INTERFACE (UI) E NAVEGA√á√ÉO =====

const mainContent = document.getElementById('mainContent');
const viewGaragem = document.getElementById('viewGaragem');
const viewAdicionar = document.getElementById('viewAdicionar');
const viewDetalhesVeiculo = document.getElementById('viewDetalhesVeiculo');
const navGaragemLink = document.getElementById('navGaragem');
const navAdicionarLink = document.getElementById('navAdicionar');
const statusGlobalDiv = document.getElementById('statusGlobal');

/**
 * Mostra uma mensagem de status na √°rea global (sidebar).
 * @param {string} message - A mensagem a ser exibida.
 * @param {'success'|'error'|'info'} type - O tipo de mensagem (afeta o estilo).
 * @param {number} [duration=4000] - Dura√ß√£o em milissegundos (0 para permanente).
 */
function mostrarStatusGlobal(message, type = 'info', duration = 4000) {
    if (!statusGlobalDiv) return; // Sai se o elemento n√£o existir

    statusGlobalDiv.textContent = message;
    statusGlobalDiv.className = `status-area ${type}`; // Aplica classe de estilo

    // Limpa a mensagem ap√≥s a dura√ß√£o, exceto se for 0
    if (duration > 0) {
        setTimeout(() => {
             // S√≥ limpa se a mensagem atual ainda for a mesma (evita apagar msgs novas)
             if (statusGlobalDiv.textContent === message) {
                  statusGlobalDiv.textContent = 'Pronto.';
                  statusGlobalDiv.className = 'status-area'; // Volta ao normal
             }
        }, duration);
    }
     // Rola a view da sidebar para o topo para garantir visibilidade do status
     const sidebar = document.querySelector('.sidebar');
     if (sidebar) sidebar.scrollTop = 0;
}

/**
 * Alterna a visibilidade das views principais no mainContent.
 * @param {'garagem'|'adicionar'|'detalhes'} viewToShow - A view a ser exibida.
 */
function switchView(viewToShow) {
    // Esconde todas as views
    viewGaragem.classList.add('hidden');
    viewAdicionar.classList.add('hidden');
    viewDetalhesVeiculo.classList.add('hidden');

    // Remove classe 'active' de todos os links de navega√ß√£o
    navGaragemLink.classList.remove('active');
    navAdicionarLink.classList.remove('active');

    // Mostra a view selecionada e ativa o link correspondente
    switch (viewToShow) {
        case 'garagem':
            viewGaragem.classList.remove('hidden');
            navGaragemLink.classList.add('active');
            veiculoSelecionado = null; // Desseleciona ao voltar para a garagem
            atualizarListaVeiculosUI(); // Garante que a lista esteja atualizada
            mainContent.scrollTop = 0; // Rola para o topo
            break;
        case 'adicionar':
            viewAdicionar.classList.remove('hidden');
            navAdicionarLink.classList.add('active');
            document.getElementById('formAdicionarVeiculo').reset(); // Limpa o form
            document.getElementById('statusAdicionar').textContent = ''; // Limpa status do form
            toggleCamposCaminhao(); // Ajusta campos extras no form
             mainContent.scrollTop = 0;
            break;
        case 'detalhes':
            // N√£o ativa link de navega√ß√£o, pois √© um estado vindo da garagem
             if (veiculoSelecionado) { // S√≥ mostra se houver um ve√≠culo selecionado
                 viewDetalhesVeiculo.classList.remove('hidden');
                 exibirInformacoesVeiculoSelecionado(); // Carrega os dados
                 mainContent.scrollTop = 0;
             } else {
                 // Se n√£o houver ve√≠culo selecionado, volta para a garagem
                 console.warn("Tentativa de mostrar detalhes sem ve√≠culo selecionado. Voltando para garagem.");
                 switchView('garagem');
             }
            break;
        default:
            console.error("View desconhecida solicitada:", viewToShow);
            switchView('garagem'); // Volta para a garagem por seguran√ßa
    }
}

// ===== FUN√á√ïES DE CRIA√á√ÉO E INTERFACE DE VE√çCULOS =====

/**
 * Atualiza a lista de ve√≠culos na UI (View Garagem).
 */
function atualizarListaVeiculosUI() {
    const listaDiv = document.getElementById("listaVeiculos");
    if (!listaDiv) return; // Sai se o elemento n√£o existir

    listaDiv.innerHTML = ""; // Limpa a lista atual

    if (garagem.length === 0) {
        listaDiv.innerHTML = "<p>Sua garagem est√° vazia. Adicione um ve√≠culo!</p>";
        return;
    }

    // Ordena a garagem alfabeticamente pelo modelo para exibi√ß√£o
     const garagemOrdenada = [...garagem].sort((a, b) => a.modelo.localeCompare(b.modelo));

    garagemOrdenada.forEach(veiculo => {
        const itemVeiculo = document.createElement("div");
        itemVeiculo.classList.add("veiculo-item-lista");
        itemVeiculo.dataset.id = veiculo.id; // Armazena o ID no elemento
        itemVeiculo.dataset.tipo = veiculo.tipo; // Adiciona tipo para √≠cone CSS
        itemVeiculo.textContent = veiculo.getDescricaoLista(); // Texto: Modelo (Cor)
        itemVeiculo.setAttribute('role', 'button'); // Sem√¢ntica
        itemVeiculo.setAttribute('tabindex', '0'); // Acessibilidade (foco com teclado)

        itemVeiculo.onclick = () => selecionarVeiculo(veiculo.id);
        itemVeiculo.onkeydown = (e) => { // Permite sele√ß√£o com Enter/Espa√ßo
             if (e.key === 'Enter' || e.key === ' ') {
                 selecionarVeiculo(veiculo.id);
             }
         };

        listaDiv.appendChild(itemVeiculo);
    });
}

/**
 * Seleciona um ve√≠culo pelo ID e muda para a view de detalhes.
 * @param {string} id - O ID do ve√≠culo a ser selecionado.
 */
function selecionarVeiculo(id) {
    const veiculoEncontrado = garagem.find(v => v.id === id);
    if (veiculoEncontrado) {
        veiculoSelecionado = veiculoEncontrado;
        console.log("Ve√≠culo selecionado:", veiculoSelecionado.modelo, veiculoSelecionado.id);
        switchView('detalhes'); // Muda para a view de detalhes
    } else {
        console.error("Ve√≠culo com ID n√£o encontrado para sele√ß√£o:", id);
        mostrarStatusGlobal("Erro: Ve√≠culo n√£o encontrado.", "error");
        veiculoSelecionado = null;
        switchView('garagem'); // Volta para a lista se n√£o encontrar
    }
}

/**
 * Exibe as informa√ß√µes do ve√≠culo selecionado na view de detalhes.
 */
function exibirInformacoesVeiculoSelecionado() {
    // Garante que estamos na view correta e temos um ve√≠culo
    if (!veiculoSelecionado || viewDetalhesVeiculo.classList.contains('hidden')) {
         console.warn("Tentativa de exibir detalhes sem ve√≠culo selecionado ou view oculta.");
         // Se estivermos na view de detalhes sem ve√≠culo, volta pra garagem
         if (!viewDetalhesVeiculo.classList.contains('hidden')) {
             switchView('garagem');
         }
         return;
     }

    const informacoesVeiculoDiv = document.getElementById("informacoesVeiculo");
    const imagemVeiculo = document.getElementById("imagemVeiculo");
    const historicoDiv = document.getElementById("historicoManutencao");
    const agendamentosDiv = document.getElementById("agendamentosFuturos");
    const formAgendamento = document.getElementById("formularioAgendamento");

    try {
        // Exibe informa√ß√µes usando o m√©todo polim√≥rfico
        informacoesVeiculoDiv.innerHTML = veiculoSelecionado.exibirInformacoesDetalhes();

        // Define imagem baseada no tipo
        let imagePath = `imagens/${veiculoSelecionado.tipo}.png`; // Assume nomes de arquivo padr√£o
        imagemVeiculo.src = imagePath;
        imagemVeiculo.alt = `Imagem de um ${veiculoSelecionado.tipo} ${veiculoSelecionado.modelo}`;
        imagemVeiculo.style.display = "block";
         // Adiciona um fallback simples caso a imagem n√£o carregue
         imagemVeiculo.onerror = () => {
             imagemVeiculo.style.display = 'none';
             console.warn(`Imagem n√£o encontrada: ${imagePath}`);
         };

        // Atualiza status visual (velocidade, ligado/desligado)
        atualizarStatusVisual(veiculoSelecionado);

        // Atualiza displays de manuten√ß√£o
        atualizarDisplayManutencao(veiculoSelecionado);

        // Controla visibilidade dos bot√µes de a√ß√£o espec√≠ficos
        controlarBotoesAcaoVisibilidade();

        // Limpa o formul√°rio de agendamento
        formAgendamento.reset();

    } catch (error) {
         console.error("Erro ao exibir informa√ß√µes do ve√≠culo selecionado:", error);
         mostrarStatusGlobal("Erro ao carregar detalhes do ve√≠culo.", "error");
         // Opcional: voltar para a garagem em caso de erro grave
         // switchView('garagem');
    }
}

/**
 * Atualiza a barra de progresso, texto de status (Ligado/Desligado)
 * e outras informa√ß√µes din√¢micas na view de detalhes.
 * @param {Carro} veiculo - O ve√≠culo cujas informa√ß√µes devem ser exibidas.
 */
function atualizarStatusVisual(veiculo) {
    // S√≥ atualiza se o ve√≠culo passado for o selecionado e a view estiver vis√≠vel
     if (!veiculoSelecionado || veiculo.id !== veiculoSelecionado.id || viewDetalhesVeiculo.classList.contains('hidden')) {
         return;
     }

    const velocidadeProgress = document.getElementById("velocidadeProgress");
    const statusVeiculoSpan = document.getElementById("statusVeiculo");
    const velocidadeTexto = document.getElementById("velocidadeTexto");
    const informacoesVeiculoDiv = document.getElementById("informacoesVeiculo"); // Para atualizar carga/turbo

    if (!velocidadeProgress || !statusVeiculoSpan || !velocidadeTexto || !informacoesVeiculoDiv) {
        console.error("Elementos da UI para status visual n√£o encontrados.");
        return;
    }

    try {
        // --- Atualiza Barra de Velocidade ---
        const velMax = veiculo.velocidadeMaxima > 0 ? veiculo.velocidadeMaxima : 1; // Evita divis√£o por zero
        const porcentagemVelocidade = (veiculo.velocidade / velMax) * 100;
        // Garante que a porcentagem fique entre 0 e 100
        velocidadeProgress.style.width = `${Math.min(100, Math.max(0, porcentagemVelocidade))}%`;
        velocidadeTexto.textContent = `${Math.round(veiculo.velocidade)} km/h`;

        // --- Atualiza Status Ligado/Desligado ---
        if (veiculo.ligado) {
            statusVeiculoSpan.textContent = "Ligado";
            statusVeiculoSpan.className = "status-ligado";
        } else {
            statusVeiculoSpan.textContent = "Desligado";
            statusVeiculoSpan.className = "status-desligado";
        }

        // --- Re-renderiza as informa√ß√µes para refletir mudan√ßas (carga, turbo) ---
        // Chama o m√©todo polim√≥rfico para obter o HTML atualizado
        informacoesVeiculoDiv.innerHTML = veiculo.exibirInformacoesDetalhes();

        // --- Controla bot√µes (habilita/desabilita baseado no estado) ---
        controlarBotoesAcaoEstado(veiculo);

    } catch (error) {
         console.error("Erro ao atualizar status visual:", error);
         // N√£o mostrar status global aqui para n√£o poluir com erros internos frequentes
    }
}


/**
 * Controla a VISIBILIDADE dos bot√µes de a√ß√£o espec√≠ficos (Turbo, Carga)
 * com base no TIPO do ve√≠culo selecionado. Chamado ao selecionar um ve√≠culo.
 */
function controlarBotoesAcaoVisibilidade() {
    if (!veiculoSelecionado) return;

    const ehEsportivo = veiculoSelecionado instanceof CarroEsportivo;
    const ehCaminhao = veiculoSelecionado instanceof Caminhao;

    // Esconde/mostra bot√µes baseado no tipo
    document.getElementById('btnTurboOn').classList.toggle('hidden', !ehEsportivo);
    document.getElementById('btnTurboOff').classList.toggle('hidden', !ehEsportivo);
    document.getElementById('btnCarregar').classList.toggle('hidden', !ehCaminhao);
    document.getElementById('btnDescarregar').classList.toggle('hidden', !ehCaminhao);
}

/**
 * Controla o ESTADO (habilitado/desabilitado) dos bot√µes de a√ß√£o
 * com base no ESTADO ATUAL do ve√≠culo selecionado (ligado/desligado, turbo on/off, etc.).
 * Chamado sempre que o estado do ve√≠culo muda (ligar, desligar, acelerar, etc.).
 * @param {Carro} veiculo - O ve√≠culo selecionado.
 */
function controlarBotoesAcaoEstado(veiculo) {
     if (!veiculo) return;

     const ligado = veiculo.ligado;
     const parado = veiculo.velocidade === 0;

     // Bot√µes gerais
     document.querySelector('button[onclick="interagir(\'ligar\')"]').disabled = ligado;
     document.querySelector('button[onclick="interagir(\'desligar\')"]').disabled = !ligado || !parado; // S√≥ desliga parado
     document.querySelector('button[onclick="interagir(\'acelerar\')"]').disabled = !ligado;
     document.querySelector('button[onclick="interagir(\'frear\')"]').disabled = !ligado && parado; // Desabilitado se desligado E parado
     document.querySelector('button[onclick="interagir(\'buzinar\')"]').disabled = false; // Buzina sempre funciona? (Ou s√≥ ligado?) - Decis√£o: sempre

     // Bot√µes espec√≠ficos
     if (veiculo instanceof CarroEsportivo) {
         const turboAtivado = veiculo.turboAtivado;
         document.getElementById('btnTurboOn').disabled = !ligado || turboAtivado;
         document.getElementById('btnTurboOff').disabled = !ligado || !turboAtivado;
     }
     if (veiculo instanceof Caminhao) {
         const cargaAtual = veiculo.cargaAtual;
         const capacidade = veiculo.capacidadeCarga;
         // S√≥ carrega/descarrega desligado
         document.getElementById('btnCarregar').disabled = ligado || cargaAtual >= capacidade;
         document.getElementById('btnDescarregar').disabled = ligado || cargaAtual <= 0;
     }
}


/**
 * Fun√ß√£o unificada chamada pelo formul√°rio de adi√ß√£o de ve√≠culo.
 * @param {Event} event - O evento de submit do formul√°rio.
 */
function criarVeiculoUnificado(event) {
    event.preventDefault(); // Impede recarregamento da p√°gina
    const statusAdicionarP = document.getElementById('statusAdicionar');
    statusAdicionarP.textContent = ''; // Limpa status anterior

    const tipo = document.getElementById("addTipoVeiculo").value;
    const modelo = document.getElementById("addModelo").value.trim();
    const cor = document.getElementById("addCor").value.trim();

    let novoVeiculo = null;

    try {
        // Valida√ß√µes b√°sicas comuns
        if (!modelo || !cor) {
             throw new Error("Modelo e Cor s√£o obrigat√≥rios.");
         }

        switch (tipo) {
            case 'carro':
                novoVeiculo = new Carro(modelo, cor);
                break;
            case 'esportivo':
                novoVeiculo = new CarroEsportivo(modelo, cor);
                break;
            case 'caminhao':
                const capacidadeInput = document.getElementById("addCapacidade");
                const capacidade = parseInt(capacidadeInput.value);
                // Valida√ß√£o espec√≠fica de caminh√£o
                if (isNaN(capacidade) || capacidade <= 0) {
                     capacidadeInput.focus(); // Foca no campo inv√°lido
                     throw new Error("Capacidade de carga inv√°lida para Caminh√£o (deve ser n√∫mero positivo).");
                 }
                novoVeiculo = new Caminhao(modelo, cor, capacidade);
                break;
            default:
                throw new Error("Tipo de ve√≠culo inv√°lido selecionado.");
        }

        if (novoVeiculo) {
            garagem.push(novoVeiculo);
            salvarGaragem();
            atualizarListaVeiculosUI(); // Atualiza a lista na view da garagem
            console.log(`${novoVeiculo.tipo.charAt(0).toUpperCase() + novoVeiculo.tipo.slice(1)} ${novoVeiculo.modelo} criado.`);
            // Mensagem de sucesso no formul√°rio e redireciona para a garagem
            statusAdicionarP.textContent = `${novoVeiculo.tipo.charAt(0).toUpperCase() + novoVeiculo.tipo.slice(1)} "${modelo}" adicionado com sucesso!`;
            statusAdicionarP.style.color = 'green';
            mostrarStatusGlobal(`${novoVeiculo.tipo} ${modelo} adicionado!`, 'success');
             // Limpa o form ap√≥s sucesso
            event.target.reset(); // Reseta o formul√°rio
            toggleCamposCaminhao(); // Garante que campos extras sejam resetados/ocultados

             // Opcional: Redirecionar para a garagem ap√≥s um pequeno delay
             setTimeout(() => switchView('garagem'), 1500);

        }
    } catch (error) {
         console.error("Erro ao criar ve√≠culo:", error);
         // Exibe erro no formul√°rio
         statusAdicionarP.textContent = `Erro: ${error.message}`;
         statusAdicionarP.style.color = 'red';
         mostrarStatusGlobal(`Falha ao adicionar ve√≠culo: ${error.message}`, 'error');
     }
}

/**
 * Mostra ou esconde os campos espec√≠ficos para caminh√£o no formul√°rio de adi√ß√£o.
 */
function toggleCamposCaminhao() {
    const tipoSelecionado = document.getElementById('addTipoVeiculo').value;
    const camposCaminhaoDiv = document.getElementById('camposCaminhao');
    const capacidadeInput = document.getElementById('addCapacidade');

    if (tipoSelecionado === 'caminhao') {
        camposCaminhaoDiv.classList.remove('hidden');
        capacidadeInput.required = true; // Torna obrigat√≥rio se for caminh√£o
    } else {
        camposCaminhaoDiv.classList.add('hidden');
        capacidadeInput.required = false; // N√£o obrigat√≥rio para outros tipos
        capacidadeInput.value = ''; // Limpa o valor se n√£o for caminh√£o
    }
}


// ===== FUN√á√ïES DE INTERA√á√ÉO COM O VE√çCULO SELECIONADO =====

/**
 * Fun√ß√£o gen√©rica chamada pelos bot√µes de a√ß√£o na view de detalhes.
 * @param {string} acao - A a√ß√£o a ser executada (ex: 'ligar', 'acelerar').
 */
function interagir(acao) {
    if (!veiculoSelecionado) {
        mostrarStatusGlobal("Nenhum ve√≠culo selecionado para interagir!", "error");
        return;
    }

    console.log(`Tentando executar a√ß√£o: ${acao} em ${veiculoSelecionado.modelo}`);

    try {
        switch (acao) {
            case "ligar":           veiculoSelecionado.ligar(); break;
            case "desligar":        veiculoSelecionado.desligar(); break;
            case "acelerar":        veiculoSelecionado.acelerar(15); break; // Incremento maior
            case "frear":           veiculoSelecionado.frear(20); break; // Decremento maior
            case "buzinar":         veiculoSelecionado.buzinar(); break;
            case "ativarTurbo":
                 if (veiculoSelecionado instanceof CarroEsportivo) veiculoSelecionado.ativarTurbo();
                 else mostrarStatusGlobal("Este ve√≠culo n√£o possui turbo.", "error");
                 break;
            case "desativarTurbo":
                 if (veiculoSelecionado instanceof CarroEsportivo) veiculoSelecionado.desativarTurbo();
                 else mostrarStatusGlobal("Este ve√≠culo n√£o possui turbo.", "error");
                 break;
            case "carregar":
                 if (veiculoSelecionado instanceof Caminhao) {
                      // Verifica se est√° desligado ANTES de pedir o prompt
                      if (veiculoSelecionado.ligado) {
                           mostrarStatusGlobal("Desligue o caminh√£o antes de carregar.", "error");
                           return; // Sai sem pedir prompt
                       }
                       const cargaStr = prompt(`Quanto carregar? (Capacidade: ${veiculoSelecionado.capacidadeCarga}kg, Carga Atual: ${veiculoSelecionado.cargaAtual}kg, Restante: ${veiculoSelecionado.capacidadeCarga - veiculoSelecionado.cargaAtual}kg)`);
                       if (cargaStr !== null) { // Se usu√°rio n√£o cancelou
                            const carga = parseFloat(cargaStr);
                            if (!isNaN(carga) && carga > 0) {
                                veiculoSelecionado.carregar(carga); // O m√©todo carregar j√° mostra status
                            } else if (carga <= 0) {
                                mostrarStatusGlobal("A quantidade para carregar deve ser positiva.", "error");
                            } else {
                                mostrarStatusGlobal("Valor de carga inv√°lido.", "error");
                            }
                        }
                 } else { mostrarStatusGlobal("Este ve√≠culo n√£o pode ser carregado.", "error"); }
                 break;
            case "descarregar":
                 if (veiculoSelecionado instanceof Caminhao) {
                      if (veiculoSelecionado.ligado) {
                           mostrarStatusGlobal("Desligue o caminh√£o antes de descarregar.", "error");
                           return;
                       }
                       const descargaStr = prompt(`Quanto descarregar? (Carga Atual: ${veiculoSelecionado.cargaAtual} kg)`);
                       if (descargaStr !== null) {
                           const descarga = parseFloat(descargaStr);
                           if (!isNaN(descarga) && descarga > 0) {
                               veiculoSelecionado.descarregar(descarga); // O m√©todo descarregar j√° mostra status
                           } else if (descarga <= 0) {
                                mostrarStatusGlobal("A quantidade para descarregar deve ser positiva.", "error");
                           } else {
                               mostrarStatusGlobal("Valor de descarga inv√°lido.", "error");
                           }
                       }
                 } else { mostrarStatusGlobal("Este ve√≠culo n√£o pode ser descarregado.", "error"); }
                 break;
            default:
                console.warn("A√ß√£o de intera√ß√£o desconhecida:", acao);
                 mostrarStatusGlobal(`A√ß√£o "${acao}" n√£o reconhecida.`, "error");
        }

        // Ap√≥s qualquer a√ß√£o, atualiza a interface E o estado dos bot√µes
         // A atualiza√ß√£o visual j√° √© chamada dentro dos m√©todos do ve√≠culo que modificam o estado
         // Mas podemos for√ßar aqui caso algum m√©todo n√£o chame
         // if (veiculoSelecionado) { // Verifica se ainda est√° selecionado
         //     atualizarStatusVisual(veiculoSelecionado);
         // }

    } catch (error) {
        // Captura erros que possam ocorrer dentro dos m√©todos do ve√≠culo
        console.error(`Erro ao executar a√ß√£o '${acao}' no ve√≠culo ${veiculoSelecionado.modelo}:`, error);
        mostrarStatusGlobal(`Erro inesperado durante a a√ß√£o: ${error.message}`, "error");
    }
}


// ===== FUN√á√ïES DE MANUTEN√á√ÉO E AGENDAMENTO =====

/**
 * Atualiza a exibi√ß√£o do hist√≥rico e agendamentos na view de detalhes.
 * @param {Carro} veiculo - O ve√≠culo selecionado.
 */
function atualizarDisplayManutencao(veiculo) {
    const historicoDiv = document.getElementById("historicoManutencao");
    const agendamentosDiv = document.getElementById("agendamentosFuturos");

    // Limpa displays
    historicoDiv.innerHTML = "<p>Nenhuma manuten√ß√£o realizada registrada.</p>";
    agendamentosDiv.innerHTML = "<p>Nenhum agendamento futuro.</p>";

    if (!veiculo) return; // Sai se n√£o houver ve√≠culo

    try {
        const { realizadas, futuras, passadas } = veiculo.getHistoricoFormatado();

        // Exibe hist√≥rico de realizadas
        if (realizadas.length > 0) {
            historicoDiv.innerHTML = ""; // Limpa o placeholder
            realizadas.forEach(item => {
                const p = document.createElement("div"); // Usar div para melhor estiliza√ß√£o
                p.classList.add("manutencao-item");
                p.textContent = item;
                historicoDiv.appendChild(p);
            });
        }

        // Exibe agendamentos futuros
        if (futuras.length > 0) {
            agendamentosDiv.innerHTML = ""; // Limpa o placeholder
            futuras.forEach(item => {
                const p = document.createElement("div");
                p.classList.add("agendamento-item");
                p.textContent = item;
                agendamentosDiv.appendChild(p);
            });
        }

        // Opcional: Exibir agendamentos passados que n√£o foram marcados como realizados
        if (passadas.length > 0) {
            // Se j√° tinha futuros, adiciona um separador ou t√≠tulo
            if (futuras.length > 0) {
                 const separador = document.createElement('hr');
                 separador.style.marginTop = '15px';
                 agendamentosDiv.appendChild(separador);
            } else {
                // Se n√£o tinha futuros, limpa o placeholder de agendamentos
                agendamentosDiv.innerHTML = "";
            }

             const passadasTitle = document.createElement('h4');
             passadasTitle.textContent = "Agendamentos Passados";
             passadasTitle.style.marginTop = '10px';
             passadasTitle.style.color = '#6c757d';
             agendamentosDiv.appendChild(passadasTitle);

             passadas.forEach(item => {
                 const p = document.createElement("div");
                 p.classList.add("agendamento-item", "passado"); // Adiciona classe 'passado'
                 p.textContent = item;
                 agendamentosDiv.appendChild(p);
             });
         }

    } catch (error) {
         console.error("Erro ao atualizar display de manuten√ß√£o:", error);
         historicoDiv.innerHTML = "<p>Erro ao carregar hist√≥rico.</p>";
         agendamentosDiv.innerHTML = "<p>Erro ao carregar agendamentos.</p>";
         mostrarStatusGlobal("Erro ao exibir dados de manuten√ß√£o.", "error");
    }
}


/**
 * Fun√ß√£o chamada pelo formul√°rio para AGENDAR uma nova manuten√ß√£o.
 * @param {Event} event - O evento de submit do formul√°rio.
 */
function agendarManutencao(event) {
    event.preventDefault(); // Impede envio padr√£o

    if (!veiculoSelecionado) {
        mostrarStatusGlobal("Selecione um ve√≠culo antes de agendar.", "error");
        return;
    }

    const data = document.getElementById("dataAgendamento").value;
    const tipo = document.getElementById("tipoAgendamento").value.trim();
    const custoInput = document.getElementById("custoAgendamento").value;
    const descricao = document.getElementById("descricaoAgendamento").value.trim();

    // Custo √© opcional ao agendar, ser√° tratado como null se vazio ou inv√°lido
    const custo = (custoInput && !isNaN(parseFloat(custoInput)) && parseFloat(custoInput) >= 0)
                  ? parseFloat(custoInput)
                  : null;

    const novaManutencao = new Manutencao(data, tipo, custo, descricao, "Agendada");

    // Valida√ß√£o acontece dentro do adicionarManutencao (que chama validar())
    if (veiculoSelecionado.adicionarManutencao(novaManutencao)) {
        const dataFormatada = new Date(data+'T00:00:00').toLocaleDateString('pt-BR');
        mostrarStatusGlobal(`Manuten√ß√£o "${tipo}" agendada para ${dataFormatada}!`, "success");
        atualizarDisplayManutencao(veiculoSelecionado); // Atualiza a UI
        document.getElementById("formularioAgendamento").reset(); // Limpa o formul√°rio
        verificarAgendamentosProximos(); // Verifica alertas
    } else {
        // O erro espec√≠fico j√° foi mostrado pela fun√ß√£o validar() ou adicionarManutencao()
        console.error("Falha ao agendar manuten√ß√£o (ver status global para detalhes).");
        // Focar no primeiro campo inv√°lido pode ser √∫til aqui
    }
}

/**
 * Fun√ß√£o chamada pelo bot√£o para REGISTRAR uma manuten√ß√£o j√° realizada.
 */
function adicionarManutencaoRealizada() {
     if (!veiculoSelecionado) {
         mostrarStatusGlobal("Selecione um ve√≠culo antes de registrar manuten√ß√£o.", "error");
         return;
     }

     const dataInput = document.getElementById("dataAgendamento");
     const tipoInput = document.getElementById("tipoAgendamento");
     const custoInput = document.getElementById("custoAgendamento");
     const descricaoInput = document.getElementById("descricaoAgendamento");

     const data = dataInput.value;
     const tipo = tipoInput.value.trim();
     const custoStr = custoInput.value;
     const descricao = descricaoInput.value.trim();

     // Valida√ß√£o espec√≠fica para 'Realizada': Custo √© obrigat√≥rio e >= 0
     const custo = parseFloat(custoStr);
     if (custoStr === '' || isNaN(custo) || custo < 0) {
          mostrarStatusGlobal("Erro: O Custo √© obrigat√≥rio e deve ser um n√∫mero positivo (ou zero) para registrar manuten√ß√£o realizada.", "error");
          custoInput.focus(); // Foca no campo de custo
          return;
      }

     const novaManutencao = new Manutencao(data, tipo, custo, descricao, "Realizada");

     // Valida√ß√£o acontece dentro do adicionarManutencao
     if (veiculoSelecionado.adicionarManutencao(novaManutencao)) {
         const dataFormatada = new Date(data+'T00:00:00').toLocaleDateString('pt-BR');
         mostrarStatusGlobal(`Manuten√ß√£o "${tipo}" registrada como realizada em ${dataFormatada}!`, "success");
         atualizarDisplayManutencao(veiculoSelecionado); // Atualiza UI
         document.getElementById("formularioAgendamento").reset(); // Limpa form
     } else {
          console.error("Falha ao registrar manuten√ß√£o realizada (ver status global).");
           // Focar no campo que pode ter causado o erro (data ou tipo se custo j√° foi validado)
           if (!data) dataInput.focus();
           else if (!tipo) tipoInput.focus();
     }
}

// ===== UTILIT√ÅRIOS =====

/**
 * Gera um UUID v4 (identificador √∫nico universal).
 * @returns {string} Um UUID v4.
 */
function uuidv4() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
}

/**
 * Reproduz um som pelo ID do elemento de √°udio.
 * @param {string} soundId - O ID do elemento <audio>.
 */
function playSound(soundId) {
    const sound = document.getElementById(soundId);
    if (sound && sound instanceof HTMLAudioElement) {
        sound.currentTime = 0; // Reinicia para tocar do in√≠cio
        sound.play().catch(error => {
            // Erros comuns: intera√ß√£o do usu√°rio necess√°ria, formato n√£o suportado
             if (error.name === 'NotAllowedError') {
                 console.warn("Reprodu√ß√£o de √°udio bloqueada pelo navegador. Intera√ß√£o do usu√°rio necess√°ria.");
                 // Poderia exibir uma mensagem sutil na UI pedindo para clicar em algo
             } else {
                 console.warn(`Erro ao tocar som "${soundId}":`, error);
             }
        });
    } else {
        console.warn("Elemento de √°udio n√£o encontrado ou inv√°lido:", soundId);
    }
}

/**
 * Converte uma data string dd/mm/yyyy para um objeto Date.
 * @param {string} dateString - Data no formato "dd/mm/yyyy".
 * @returns {Date|null} Objeto Date ou null se inv√°lido.
 */
function parsePtBrDate(dateString) {
    if (!dateString) return null;
    const parts = dateString.split('/');
    if (parts.length === 3) {
        // Formato: M√™s √© 0-indexado no construtor Date
        const date = new Date(+parts[2], parts[1] - 1, +parts[0]);
        // Verifica se a data criada √© v√°lida e corresponde √†s partes
        if (date && date.getDate() == parts[0] && date.getMonth() == parts[1] - 1 && date.getFullYear() == parts[2]) {
            return date;
        }
    }
    return null;
}


/**
 * Verifica agendamentos pr√≥ximos (hoje, amanh√£) e exibe alertas.
 */
function verificarAgendamentosProximos() {
    const hoje = new Date();
    hoje.setHours(0, 0, 0, 0);
    const amanha = new Date(hoje);
    amanha.setDate(hoje.getDate() + 1);

    let alertasHoje = [];
    let alertasAmanha = [];

    garagem.forEach(veiculo => {
        veiculo.historicoManutencao.forEach(manutencao => {
            if (manutencao.status === 'Agendada') {
                const dataAgendamento = manutencao.getDataObj();
                if (dataAgendamento) {
                    dataAgendamento.setHours(0,0,0,0); // Compara s√≥ a data

                    if (dataAgendamento.getTime() === hoje.getTime()) {
                        alertasHoje.push(`HOJE: ${manutencao.tipo} - ${veiculo.modelo}`);
                    } else if (dataAgendamento.getTime() === amanha.getTime()) {
                        alertasAmanha.push(`AMANH√É: ${manutencao.tipo} - ${veiculo.modelo}`);
                    }
                }
            }
        });
    });

    const todosAlertas = [...alertasHoje, ...alertasAmanha];

    if (todosAlertas.length > 0) {
        // Exibe um √∫nico alerta com todas as notifica√ß√µes importantes
         // Usar mostrarStatusGlobal ou alert()? Alert √© mais intrusivo.
         // Usando status global para ser menos disruptivo.
         mostrarStatusGlobal(`Lembretes: ${todosAlertas.join(' | ')}`, 'info', 10000); // Dura√ß√£o maior
         // alert("Lembretes de Agendamento:\n\n" + todosAlertas.join("\n"));
    }
}


// ===== INICIALIZA√á√ÉO E EVENT LISTENERS GLOBAIS =====

document.addEventListener("DOMContentLoaded", () => {
    console.log("DOM carregado. Iniciando Garagem Inteligente...");

    // Adiciona listeners para navega√ß√£o principal
    navGaragemLink.addEventListener('click', (e) => { e.preventDefault(); switchView('garagem'); });
    navAdicionarLink.addEventListener('click', (e) => { e.preventDefault(); switchView('adicionar'); });

    // Adiciona listener para o bot√£o "Voltar" na view de detalhes
    document.getElementById('btnVoltarGaragem').addEventListener('click', () => switchView('garagem'));

    // Adiciona listener para o select de tipo de ve√≠culo no form de adi√ß√£o
    document.getElementById('addTipoVeiculo').addEventListener('change', toggleCamposCaminhao);

    // Carrega a garagem salva
    carregarGaragem();

    // Define a view inicial
    switchView('garagem'); // Come√ßa mostrando a lista de ve√≠culos

    // Verifica agendamentos logo ap√≥s carregar
    // verificarAgendamentosProximos(); // J√° √© chamado dentro de carregarGaragem

    console.log("Garagem Inteligente inicializada.");
     mostrarStatusGlobal("Sistema pronto.", "success", 2000);
});

// Opcional: Salvar antes de fechar a p√°gina (pode n√£o ser 100% confi√°vel)
// window.addEventListener('beforeunload', (event) => {
//      console.log("Tentando salvar garagem antes de descarregar a p√°gina...");
//      salvarGaragem();
     // N√£o √© recomendado impedir o fechamento aqui (delete event.returnValue)
// });